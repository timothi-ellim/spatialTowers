
<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentDetails = GetComponentDetails();
    var fieldDetailsList = GetFieldDetailsList();
    var eventDetailsList = GetEventDetailsList();
    var commandDetailsList = GetCommandDetailsList();
    var componentNamespace = qualifiedNamespace + "." + componentDetails.ComponentName;
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using Unity.Entities;
using Improbable.Gdk.Core;
using Improbable.Gdk.GameObjectRepresentation;
using Entity = Unity.Entities.Entity;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        public partial class Requirable
        {
            [InjectableId(InjectableType.ReaderWriter, <#= unityComponentDefinition.Id #>)]
            internal class ReaderWriterCreator : IInjectableCreator
            {
                public IInjectable CreateInjectable(Entity entity, EntityManager entityManager, ILogDispatcher logDispatcher)
                {
                    return new ReaderWriterImpl(entity, entityManager, logDispatcher);
                }
            }

            [InjectableId(InjectableType.ReaderWriter, <#= unityComponentDefinition.Id #>)]
            [InjectionCondition(InjectionCondition.RequireComponentPresent)]
            public interface Reader : IReader<<#= componentNamespace #>.Component, <#= componentNamespace #>.Update>
            {
<# foreach (var fieldDetails in fieldDetailsList) { #>
                event Action<<#= fieldDetails.Type #>> <#= fieldDetails.PascalCaseName #>Updated;
<# } #>
<# foreach (var eventDetails in eventDetailsList) {
            var payloadType = eventDetails.FqnPayloadType;
#>
                event Action<<#= payloadType #>> On<#= eventDetails.EventName #>;
<# } #>
            }

            [InjectableId(InjectableType.ReaderWriter, <#= unityComponentDefinition.Id #>)]
            [InjectionCondition(InjectionCondition.RequireComponentWithAuthority)]
            public interface Writer : Reader, IWriter<<#= componentNamespace #>.Component, <#= componentNamespace #>.Update>
            {
<# foreach (var eventDetails in eventDetailsList) { #>
                void Send<#= eventDetails.EventName #>( <#= eventDetails.FqnPayloadType #> payload);
<# } #>
            }

            internal class ReaderWriterImpl :
                ReaderWriterBase<<#= componentNamespace #>.Component, <#= componentNamespace #>.Update>, Reader, Writer
            {
                public ReaderWriterImpl(Entity entity, EntityManager entityManager, ILogDispatcher logDispatcher)
                    : base(entity, entityManager, logDispatcher)
                {
                }
<# foreach (var fieldDetails in fieldDetailsList) { #>

                private readonly List<Action<<#= fieldDetails.Type #>>> <#= fieldDetails.CamelCaseName #>Delegates = new List<Action<<#= fieldDetails.Type #>>>();

                public event Action<<#= fieldDetails.Type #>> <#= fieldDetails.PascalCaseName #>Updated
                {
                    add
                    {
                        if (!IsValid())
                        {
                            return;
                        }

                        <#= fieldDetails.CamelCaseName #>Delegates.Add(value);
                    }
                    remove
                    {
                        if (!IsValid())
                        {
                            return;
                        }

                        <#= fieldDetails.CamelCaseName #>Delegates.Remove(value);
                    }
                }
<# } #>

                protected override void TriggerFieldCallbacks(<#= componentNamespace #>.Update update)
                {
<# foreach (var fieldDetails in fieldDetailsList) { #>
                    DispatchWithErrorHandling(update.<#= fieldDetails.PascalCaseName #>, <#= fieldDetails.CamelCaseName #>Delegates);
<# } #>
                }

                protected override void ApplyUpdate(<#= componentNamespace #>.Update update, ref <#= componentNamespace #>.Component data)
                {
<# foreach (var fieldDetails in fieldDetailsList) { #>
                    if (update.<#= fieldDetails.PascalCaseName #>.HasValue)
                    {
                        data.<#= fieldDetails.PascalCaseName #> = update.<#= fieldDetails.PascalCaseName #>.Value;
                    }
<# } #>
                }
<# foreach (var eventDetails in eventDetailsList) {
            var delegateList = eventDetails.EventName + "Delegates";
            var payloadType = eventDetails.FqnPayloadType;
#>

                private readonly List<Action<<#= payloadType #>>> <#= delegateList #> = new List<Action<<#= payloadType #>>>();

                public event Action<<#= payloadType #>> On<#= eventDetails.EventName #>
                {
                    add
                    {
                        if (!IsValid())
                        {
                            return;
                        }

                        <#= delegateList #>.Add(value);
                    }
                    remove
                    {
                        if (!IsValid())
                        {
                            return;
                        }

                        <#= delegateList #>.Remove(value);
                    }
                }

                public void On<#= eventDetails.EventName #>Event(<#= payloadType #> payload)
                {
                    GameObjectDelegates.DispatchWithErrorHandling(payload, <#= delegateList #>, logDispatcher);
                }

                public void Send<#= eventDetails.EventName #>(<#= eventDetails.FqnPayloadType #> payload)
                {
                    if (!IsValid())
                    {
                        return;
                    }

                    var sender = EntityManager.GetComponentData<EventSender.<#= eventDetails.EventName #>>(Entity);
                    sender.Events.Add(payload);
                }
<# } #>
            }
        }
    }
}
