<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentDetails = GetComponentDetails();
    var eventDetailsList = GetEventDetailsList();
#>
<#= generatedHeader #>

using System.Collections.Generic;
using Unity.Entities;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        public static class ReceivedEvents
        {
<# foreach (var eventDetails in eventDetailsList) { #>
            public struct <#= eventDetails.EventName #> : IComponentData
            {
                internal uint handle;

                public List<<#= eventDetails.FqnPayloadType #>> Events
                {
                    get => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= eventDetails.EventName #>Provider.Get(handle);
                    internal set => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= eventDetails.EventName #>Provider.Set(handle, value);
                }
            }

<# } #>
        }

        public static class EventSender
        {
<# foreach (var eventDetails in eventDetailsList) { #>
            public struct <#= eventDetails.EventName #> : IComponentData
            {
                internal uint handle;

                public List<<#= eventDetails.FqnPayloadType #>> Events
                {
                    get => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= eventDetails.EventName #>Provider.Get(handle);
                    internal set => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= eventDetails.EventName #>Provider.Set(handle, value);
                }
            }

<# } #>
        }
    }
}
