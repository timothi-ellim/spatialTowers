<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentDetails = GetComponentDetails();
    var commandDetailsList = GetCommandDetailsList();
#>
<#= generatedHeader #>

using System.Collections.Generic;
using Unity.Entities;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        public class CommandSenders
        {
<# foreach (var command in commandDetailsList) { #>
            public struct <#= command.CommandName #> : IComponentData
            {
                internal uint CommandListHandle;
                public List<<#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.<#= command.CommandName #>.Request> RequestsToSend
                {
                    get => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= command.CommandName #>SenderProvider.Get(CommandListHandle);
                    set => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= command.CommandName #>SenderProvider.Set(CommandListHandle, value);
                }
            }
<# } #>
        }

        public class CommandRequests
        {
<# foreach (var command in commandDetailsList) { #>
            public struct <#= command.CommandName #> : IComponentData
            {
                internal uint CommandListHandle;
                public List<<#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.<#= command.CommandName #>.ReceivedRequest> Requests
                {
                    get => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= command.CommandName #>RequestsProvider.Get(CommandListHandle);
                    set => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= command.CommandName #>RequestsProvider.Set(CommandListHandle, value);
                }
            }
<# } #>
        }

        public class CommandResponders
        {
<# foreach (var command in commandDetailsList) { #>
            public struct <#= command.CommandName #> : IComponentData
            {
                internal uint CommandListHandle;
                public List<<#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.<#= command.CommandName #>.Response> ResponsesToSend
                {
                    get => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= command.CommandName #>ResponderProvider.Get(CommandListHandle);
                    set => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= command.CommandName #>ResponderProvider.Set(CommandListHandle, value);
                }
            }
<# } #>
        }

        public class CommandResponses
        {
<# foreach (var command in commandDetailsList) { #>
            public struct <#= command.CommandName #> : IComponentData
            {
                internal uint CommandListHandle;
                public List<<#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.<#= command.CommandName #>.ReceivedResponse> Responses
                {
                    get => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= command.CommandName #>ResponsesProvider.Get(CommandListHandle);
                    set => <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= command.CommandName #>ResponsesProvider.Set(CommandListHandle, value);
                }
            }
<# } #>
        }
    }
}
