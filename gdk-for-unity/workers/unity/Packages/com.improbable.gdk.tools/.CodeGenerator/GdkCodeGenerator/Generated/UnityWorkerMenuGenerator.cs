//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Improbable.Gdk.CodeGenerator {
    using System;
    using Improbable.CodeGeneration.Jobs;
    
    
    public partial class UnityWorkerMenuGenerator : UnityWorkerMenuGeneratorBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 3 "Templates\UnityWorkerMenuGenerator.tt"

    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var workerTypeList = GetWorkerTypes();

            
            #line default
            #line hidden
            
            #line 7 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( generatedHeader ));
            
            #line default
            #line hidden
            
            #line 7 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(@"

using Improbable.Gdk.BuildSystem;
using Improbable.Gdk.BuildSystem.Configuration;
using Improbable.Gdk.Tools;
using UnityEditor;
using UnityEngine;

namespace Improbable
{
    internal static class BuildWorkerMenu
    {
        private const string LocalMenu = ""Build for local"";
        private const string CloudMenu = ""Build for cloud"";

        private static readonly string[] AllWorkers =
        {
");
            
            #line default
            #line hidden
            
            #line 24 "Templates\UnityWorkerMenuGenerator.tt"
 foreach (var workerType in workerTypeList) { 
            
            #line default
            #line hidden
            
            #line 25 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write("            \"");
            
            #line default
            #line hidden
            
            #line 25 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( workerType ));
            
            #line default
            #line hidden
            
            #line 25 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write("\",\r\n");
            
            #line default
            #line hidden
            
            #line 26 "Templates\UnityWorkerMenuGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 27 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write("        };\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 29 "Templates\UnityWorkerMenuGenerator.tt"

for (var i = 0; i < workerTypeList.Count; i++) {
var workerType = workerTypeList[i];

            
            #line default
            #line hidden
            
            #line 33 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write("        [MenuItem(EditorConfig.ParentMenu + \"/\" + LocalMenu + \"/");
            
            #line default
            #line hidden
            
            #line 33 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( workerType ));
            
            #line default
            #line hidden
            
            #line 33 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write("\", false, EditorConfig.MenuOffset + ");
            
            #line default
            #line hidden
            
            #line 33 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(i ));
            
            #line default
            #line hidden
            
            #line 33 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(")]\r\n        public static void BuildLocal");
            
            #line default
            #line hidden
            
            #line 34 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( workerType ));
            
            #line default
            #line hidden
            
            #line 34 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write("()\r\n        {\r\n            MenuBuild(BuildEnvironment.Local, \"");
            
            #line default
            #line hidden
            
            #line 36 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( workerType ));
            
            #line default
            #line hidden
            
            #line 36 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write("\");\r\n        }\r\n\r\n        [MenuItem(EditorConfig.ParentMenu + \"/\" + CloudMenu + \"" +
                    "/");
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( workerType ));
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write("\", false, EditorConfig.MenuOffset + ");
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( i ));
            
            #line default
            #line hidden
            
            #line 39 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(")]\r\n        public static void BuildCloud");
            
            #line default
            #line hidden
            
            #line 40 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( workerType ));
            
            #line default
            #line hidden
            
            #line 40 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write("()\r\n        {\r\n            MenuBuild(BuildEnvironment.Cloud, \"");
            
            #line default
            #line hidden
            
            #line 42 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( workerType ));
            
            #line default
            #line hidden
            
            #line 42 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write("\");\r\n        }\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 45 "Templates\UnityWorkerMenuGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 46 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write("\r\n        [MenuItem(EditorConfig.ParentMenu + \"/\" + LocalMenu + \"/All workers\", f" +
                    "alse, EditorConfig.MenuOffset + ");
            
            #line default
            #line hidden
            
            #line 47 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( workerTypeList.Count ));
            
            #line default
            #line hidden
            
            #line 47 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(")]\r\n        public static void BuildLocalAll()\r\n        {\r\n            MenuBuild(" +
                    "BuildEnvironment.Local, AllWorkers);\r\n        }\r\n\r\n        [MenuItem(EditorConfi" +
                    "g.ParentMenu + \"/\" + CloudMenu + \"/All workers\", false, EditorConfig.MenuOffset " +
                    "+ ");
            
            #line default
            #line hidden
            
            #line 53 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( workerTypeList.Count ));
            
            #line default
            #line hidden
            
            #line 53 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(")]\r\n        public static void BuildCloudAll()\r\n        {\r\n            MenuBuild(" +
                    "BuildEnvironment.Cloud, AllWorkers);\r\n        }\r\n\r\n        [MenuItem(EditorConfi" +
                    "g.ParentMenu + \"/Clean all workers\", false, EditorConfig.MenuOffset + ");
            
            #line default
            #line hidden
            
            #line 59 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( workerTypeList.Count ));
            
            #line default
            #line hidden
            
            #line 59 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(")]\r\n        public static void Clean()\r\n        {\r\n            WorkerBuilder.Clea" +
                    "n();\r\n            Debug.Log(\"Clean completed\");\r\n        }\r\n\r\n        private st" +
                    "atic bool CheckWorkersCanBuildForEnvironment(BuildEnvironment environment, strin" +
                    "g[] workerTypes)\r\n        {\r\n            var canInitiateBuild = true;\r\n         " +
                    "   var spatialOSBuildConfiguration = SpatialOSBuildConfiguration.GetInstance();\r" +
                    "\n\r\n            foreach (var workerType in workerTypes)\r\n            {\r\n         " +
                    "       var buildTargetsForWorker = WorkerBuilder.GetBuildTargetsForWorkerForEnvi" +
                    "ronment(workerType, environment);\r\n                var buildTargetsMissingBuildS" +
                    "upport = BuildSupportChecker.GetBuildTargetsMissingBuildSupport(buildTargetsForW" +
                    "orker);\r\n\r\n                if (buildTargetsMissingBuildSupport.Length > 0)\r\n    " +
                    "            {\r\n                    canInitiateBuild = false;\r\n\r\n                " +
                    "    Debug.LogError(BuildSupportChecker.ConstructMissingSupportMessage(workerType" +
                    ", environment, buildTargetsMissingBuildSupport),\r\n                        spatia" +
                    "lOSBuildConfiguration);\r\n                }\r\n            }\r\n\r\n            return " +
                    "canInitiateBuild;\r\n        }\r\n\r\n        private static void MenuBuild(BuildEnvir" +
                    "onment environment, params string[] workerTypes)\r\n        {\r\n            // Dela" +
                    "ying build by a frame to ensure the editor has re-rendered the UI to avoid odd g" +
                    "litches.\r\n            EditorApplication.delayCall += () =>\r\n            {\r\n     " +
                    "           if (!CheckWorkersCanBuildForEnvironment(environment, workerTypes))\r\n " +
                    "               {\r\n                    DisplayBuildFailureDialog();\r\n\r\n          " +
                    "          return;\r\n                }\r\n\r\n                try\r\n                {\r\n" +
                    "                    LocalLaunch.BuildConfig();\r\n\r\n                    foreach (v" +
                    "ar workerType in workerTypes)\r\n                    {\r\n                        Wo" +
                    "rkerBuilder.BuildWorkerForEnvironment(workerType, environment);\r\n               " +
                    "     }\r\n\r\n                    Debug.LogFormat(\"Completed build for {0} target\", " +
                    "environment);\r\n                }\r\n                catch (System.Exception)\r\n    " +
                    "            {\r\n                    DisplayBuildFailureDialog();\r\n\r\n             " +
                    "       throw;\r\n                }\r\n            };\r\n        }\r\n\r\n        private s" +
                    "tatic void DisplayBuildFailureDialog()\r\n        {\r\n            EditorUtility.Dis" +
                    "playDialog(\"Build Failed\",\r\n                \"Build failed. Please see the Unity " +
                    "Console Window for information.\",\r\n                \"OK\");\r\n        }\r\n\r\n        " +
                    "[MenuItem(EditorConfig.ParentMenu + \"/Check build support\", false, EditorConfig." +
                    "MenuOffset + ");
            
            #line default
            #line hidden
            
            #line 127 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( workerTypeList.Count + 1 ));
            
            #line default
            #line hidden
            
            #line 127 "Templates\UnityWorkerMenuGenerator.tt"
            this.Write(@")]
        private static void CheckBuildSupport()
        {
            bool checksPassed = CheckWorkersCanBuildForEnvironment(BuildEnvironment.Local, AllWorkers);

            if (!CheckWorkersCanBuildForEnvironment(BuildEnvironment.Cloud, AllWorkers))
            {
                checksPassed = false;
            }

            EditorUtility.DisplayDialog(""Build Support Check"",
                checksPassed
                    ? ""Build support check passed. Your Unity Editor installation has all necessary components.""
                    : ""Build support check failed. Please see the Unity Console Window for information."",
                ""OK"");

            Debug.Log(""Build support check completed."");
        }
    }
}
");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class UnityWorkerMenuGeneratorBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
